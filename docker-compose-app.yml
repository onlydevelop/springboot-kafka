version: '2.4'

networks:
  app-tier:

services:
  db:
    image: postgres
    restart: always
    ports:
      - '5444:5432'
    environment:
      POSTGRES_PASSWORD: dev
      POSTGRES_USER: dev
      POSTGRES_DB: dev
    networks:
      - app-tier
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    networks:
      - app-tier
    restart: unless-stopped
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      DOCKER_API_VERSION: 1.22
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_CFG_LISTENERS: 'CLIENT://:9092,EXTERNAL://:9093'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'CLIENT://kafka:9092,EXTERNAL://localhost:9093'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'CLIENT'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - app-tier
    restart: unless-stopped
  filestore:
    image: filestore
    environment:
      spring.profiles.active: docker
    networks:
      - app-tier
    depends_on:
      - db
  uploader:
    image: uploader
    environment:
      spring.profiles.active: docker
    ports:
      - 9090:8080
    networks:
      - app-tier
    depends_on:
      - db
      - kafka
      - filestore
  parser:
    image: parser
    environment:
      spring.profiles.active: docker
    networks:
      - app-tier
    depends_on:
      - db
      - kafka
      - filestore
      - uploader
